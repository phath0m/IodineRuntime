use * from iterutils
use describe, expect from espresso


func run_tests (test) {
    test.describe ('iterutils.id', lambda (test) {

        # iterutils.id any
        test.describe ('any', lambda (test) {
            test.it ('should work with empty iterables', lambda () {
                expect (any (List ())).to.be._false ()
            })
            test.it ('should work with non-empty iterables', lambda () {
                expect (any ([1, 2, 3, 4])).to.be._true ()
            })
            test.it ('should work with empty iterables and conditions', lambda () {
                expect (any (List (), lambda (i) => 0)).to.be._false ()
            })
            test.it ('should work with non-empty iterables and conditions', lambda () {
                expect (any ([0, 1, 2, 3], lambda (i) => i == 0)).to.be._true ()
            })
        })

        # iterutils.id chain
        test.describe ('chain', lambda (test) {
            test.it ('should correctly combine iterables', lambda () {
                itera = [1, 2, 3]
                iterb = [4, 5, 6]
                expect (List (chain (itera, iterb))).to.equal ([1, 2, 3, 4, 5, 6])
            })
        })

        # iterutils.id each
        test.describe ('each', lambda (test) {
            test.it ('should correctly imitate \'for\' behavior', lambda () {
                itera = [1, 2, 3, 4]
                sum = 0
                each (itera, lambda (i) => sum += i)
                expect (sum).to.equal (10)
            })
        })

        # iterutils.id take
        test.describe ('take', lambda (test) {
            test.it ('should yield the correct elements', lambda () {
                itera = [1, 2, 3, 4]
                iterb = take (itera, 2)
                expect (List (iterb)).to.equal ([1, 2])
            })
        })

        # iterutils.id takewhile
        test.describe ('takeWhile', lambda (test) {
            test.it ('should yield the correct elements', lambda () {
                itera = [1, 2, 3, 4]
                iterb = takewhile (itera, lambda (i) => i <= 2)
                expect (List (iterb)).to.equal ([1, 2])
            })
        })

        # iterutils.id skip
        test.describe ('skip', lambda (test) {
            test.it ('should yield the correct elements', lambda () {
                itera = [1, 2, 3, 4]
                iterb = skip (itera, 2)
                expect (List (iterb)).to.equal ([3, 4])
            })
        })

        # iterutils.id skipwhile
        test.describe ('skipwhile', lambda (test) {
            test.it ('should yield the correct elements', lambda () {
                itera = [1, 2, 3, 4]
                iterb = skipwhile (itera, lambda (i) => i <= 2)
                expect (List (iterb)).to.equal ([3, 4])
            })
        })

        # iterutils.id sum
        test.describe ('sum', lambda (test) {
            test.it ('should correctly sum up iterables', lambda () {
                itera = [1, 2, 3, 4]
                expect (sum (itera)).to.equal (10)
            })
        })

        # iterutils.id zip
        test.describe ('zip', lambda (test) {
            test.it ('should correctly zip iterables together', lambda () {
                itera = [1, 2]
                iterb = [3, 4]
                iterc = zip (itera, iterb)
                lst = [(1, 3), (2, 4)]
                i = 0
                for (tpl in iterc) {
                    expect (tpl).to.equal (lst [i])
                    i += 1
                }
            })
        })

        # iterutils.id reduce
        test.describe ('reduce', lambda (test) {
            test.it ('should correctly reduce iterables', lambda () {
                itera = [1, 2, 3, 4]
                sum = reduce (itera, lambda (i, j) => i + j)
                expect (sum).to.equal (10)
            })
        })

        # iterutils.id filter
        test.describe ('filter', lambda (test) {
            test.it ('should correctly filter iterables', lambda () {
                itera = [0, 1, 2, 3]
                iterb = filter (itera, lambda (i) => i % 2 == 0)
                expect (List (iterb)).to.equal ([0, 2])
            })
        })

        # iterutils.id map
        test.describe ('map', lambda (test) {
            test.it ('should correctly map iterables', lambda () {
                itera = [0, 1, 2, 3]
                iterb = map (itera, lambda (i) => i % 2)
                expect (List (iterb)).to.equal ([0, 1, 0, 1])
            })
        })
    })
}
