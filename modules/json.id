/**
 * Provides classes and methods for parsing JSON
 * @module json
 * @author phath0m
 */

/**
 * Raised when ever malformed JSON is parsed
 */
class InvalidJsonException extends Exception {
    func InvalidJsonException (self) {
        super ("Attempted to parse invalid JSON!");
    }
}

/**
 * Represents a JSON fileisl
 */
class JsonFile {
    # JSON token types   
    enum JsonTokenType {
        BEGIN_ARRAY,
        END_ARRAY,
        BEGIN_OBJECT,
        END_OBJECT,
        NAME_SEPERATOR,
        VALUE_SEPERATOR,
        TRUE_LITERAL,
        FALSE_LITERAL,
        NULL_LITERAL,
        NUMBER_LITERAL,
        STRING_LITERAL
    }

    class JsonToken {
        func JsonToken (self, type, value) {
            self.type = type;
            self.value = value;
        }
    }

    # Static method parse, returns an object resulting from the 
    # parsed json. 
    # Throws InvalidJsonException
    func parse (json) {
        parser = JsonFile ();
        tokens = parser._initialize (json);
        return parser._parse (tokens);
    }

    func _initialize (self, source) {
        self.position = 0;
        self.length = len (source);
        self.source = source;
    }

    func _parse (self, tokens) {
        
        position = 0;
        size = len (tokens);

        func matchToken (type) {
            if (position < size) {
                return tokens [position].type == type;
            }
            return false;
        }

        func expect (type) {
            if (matchToken (type)) {
                position += 1;
                return tokens [position - 1];
            }
            raise InvalidJsonException ();
        }

        func consumeToken () {
            position += 1;
            return tokens [position - 1];
        }

        func parseItem () {
            token = tokens [position];
            ret = null;
            
                if (token.type ==  JsonFile.JsonTokenType.BEGIN_ARRAY) {
                    ret = [];
                    expect (JsonFile.JsonTokenType.BEGIN_ARRAY);
                    while (position < size && !matchToken (JsonFile.JsonTokenType.END_ARRAY)) {
                        ret.append (parseItem ());
                        if (!matchToken (JsonFile.JsonTokenType.VALUE_SEPERATOR)) {
                            break;
                        }
                        consumeToken ();
                    }
                    expect (JsonFile.JsonTokenType.END_ARRAY);
                }
                else if (token.type == JsonFile.JsonTokenType.BEGIN_OBJECT) {
                    ret = {};
                    expect (JsonFile.JsonTokenType.BEGIN_OBJECT);
                    while (position < size && !matchToken (JsonFile.JsonTokenType.END_OBJECT)) {
                        name = expect (JsonFile.JsonTokenType.STRING_LITERAL).value;
                        expect (JsonFile.JsonTokenType.NAME_SEPERATOR);
                        value = parseItem ();
                        ret [name] = value;
                        if (!matchToken (JsonFile.JsonTokenType.VALUE_SEPERATOR)) {
                            break;
                        }
                        consumeToken ();
                    }
                    expect (JsonFile.JsonTokenType.END_OBJECT);
                }
                else if (token.type == JsonFile.JsonTokenType.NUMBER_LITERAL) {
                    ret = consumeToken ().value;
                }
                else if (token.type == JsonFile.JsonTokenType.STRING_LITERAL) {
                    ret = consumeToken ().value;
                }
                else if (token.type == JsonFile.JsonTokenType.TRUE_LITERAL) {
                    consumeToken ();
                    ret = true;
                }
                else if (token.type == JsonFile.JsonTokenType.FALSE_LITERAL) {
                    consumeToken ();
                    ret = false;
                }
                else if (token.type == JsonFile.JsonTokenType.NULL_LITERAL) {
                    consumeToken ();
                    ret = null;
                }
                else {
                    raise InvalidJsonException ();
                }
            
            return ret;
        }
        
        return parseItem ();
    }

    func _tokenize (self) {
        tokens = [];
        position = 0;

        func peekChar () {
            if (position < self.length) {
                return self.source [position];
            }
            return "";
        }

        func readChar () {
            if (position < self.length) {
                position += 1;
                return self.source [position - 1];
            }
            return "";
        }

        func scanConstant () {
            accum = "";
            result = null;
            while (peekChar ().isalpha ()) {
                accum += readChar ();
            }
            match accum {
                case "true" {
                    result = JsonFile.JsonToken (JsonFile.JsonTokenType.TRUE_LITERAL, true);
                }
                case "false" {
                    result = JsonFile.JsonToken (JsonFile.JsonTokenType.FALSE_LITERAL, false);
                }
                case "null" {
                    result = JsonFile.JsonToken (JsonFile.JsonTokenType.NULL_LITERAL, null);
                }
            }
            return result;
        }

        func eatWhitespace () {
            while (peekChar ().iswhitespace ()) {
                readChar ();
            }
        }

        func scanString () {
            delim = readChar ();
            accum = "";
            while (peekChar () != "" && peekChar () != delim) {
                if (peekChar () == "\\") {
                    readChar (); 
                    ch = readChar ();
               
                    if (ch == "u") {
                        val = readChar () + readChar () + readChar () + readChar ()
                        accum += chr (Int (val, 16))
                     } else {

                        escapeVals = {"n" : "\n",
                            "t" : "\t",
                            "f" : "\f",
                            "r" : "\r",
                            "\"" : "\"",
                            "\\" : "\\"};
                        if (!escapeVals.contains (ch)) {
                            raise InvalidJsonException ();
                        }
                        accum += escapeVals [ch];
                    }
                } else {
                    accum += readChar ();
                }
            }
            readChar ();
            return accum;
        }

        func scanNumber () {
            accum = "";
            ch = peekChar ();
            do {
                accum += readChar ();
                ch = peekChar (); 
            } while (ch.isdigit ());
            return Int (accum);
        }   

        eatWhitespace ();
        while (position < self.length) {
            last = len (tokens);
            ch = peekChar ();
            match ch {
                case "{" {
                    readChar ();
                    tokens.append (JsonFile.JsonToken (JsonFile.JsonTokenType.BEGIN_OBJECT, "{"));
                }
                case "}" {
                    readChar ();
                    tokens.append (JsonFile.JsonToken (JsonFile.JsonTokenType.END_OBJECT, "}"));
                }
                case "[" {
                    readChar ();
                    tokens.append (JsonFile.JsonToken (JsonFile.JsonTokenType.BEGIN_ARRAY, "["));
                }
                case "]" {
                    readChar ();
                    tokens.append (JsonFile.JsonToken (JsonFile.JsonTokenType.END_ARRAY, "]"));
                }
                case ":" {
                    readChar ();
                    tokens.append (JsonFile.JsonToken (JsonFile.JsonTokenType.NAME_SEPERATOR, ":"));
                }
                case "," {
                    readChar ();
                    tokens.append (JsonFile.JsonToken (JsonFile.JsonTokenType.VALUE_SEPERATOR, ","));
                }
                case "-" {
                    tokens.append (JsonFile.JsonToken (JsonFile.JsonTokenType.NUMBER_LITERAL, scanNumber ()));
                }
                case "\"" {
                    tokens.append (JsonFile.JsonToken (JsonFile.JsonTokenType.STRING_LITERAL, scanString ()));
                }
                case _ {

                }
            }

            if (peekChar ().isdigit ()) {
                tokens.append (JsonFile.JsonToken (JsonFile.JsonTokenType.NUMBER_LITERAL, scanNumber ()));
            } else if (peekChar ().isalpha ()) {
                tokens.append (scanConstant ());           
            } else if (len (tokens) == last) {
                raise InvalidJsonException ();
            }
            eatWhitespace ();
        }
        return tokens;
    }
}

/**
 * Parses a JSON string
 * @param json the Json to parse
 * @returns The Iodine representation of the JSON string
 */
func parse (json) {
    file = JsonFile ();
    file._initialize (json);
    return file._parse (file._tokenize ());
}

/**
 * Converts an Iodine object into json
 * @param item The item to dump
 * @returns A JSON string
 */
func dump (item) {
    return _dump (item);
}

func _dump (item) {
    if (item is List) {
        items = map (item, lambda (x) {
            return _dump (x);
        });
        return "[{}]".format (",".join (items));
    } else if (item is Dict) {
        items = map (item, lambda (x) {
            key, value = x
           return _dump (key) + " : " + _dump (value);
        });
        return "{" + ",".join (items) + "}";
    } else if (item is Int) {
        return Str (item);
    } else if (item is Bool) {
        if (item) {
            return "true";
        } else {
            return "false";
        }
    }
    return "\"{}\"".format (_escapeStr (Str (item)));
}

func _escapeStr (str) {
    prevCh = ' ';
    buf = StringBuffer ();
    for (ch in str) {
        if (ch == '"' && prevCh != "\\") {
            buf.append ("\\\"");
        } else if (ch == "\\") {
            buf.append ("\\\\")
        } else {
            buf.append (ch);
        }
        prevCh = ch;
    }
    return Str (buf).replace ("\n", "\\n").replace ("\r", "\\r");
}

func _dumpList (item) {
    return "[{}]".format (",".join (item));
}

