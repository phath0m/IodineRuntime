# Author: SplittyDev (github.com/splittydev)

class Base64 {
    func encode (str) {
        typecast (Str, str)
        length = len (str)
        encoded = StringBuffer ()
        i = 0

        while i < length - 2 {
            encoded.append (Base64.chars  [(ord (str [i + 0]) >>    2) &  0x3F])
            encoded.append (Base64.chars [((ord (str [i + 0]) &  0x03) <<   4)|
                ((ord (str [i + 1]) &  0xF0) >>   4)])
            encoded.append (Base64.chars [((ord (str [i + 1]) &  0x0F) <<   2)|
                ((ord (str [i + 2]) &  0xC0) >>   6)])
            encoded.append (Base64.chars   [ord (str [i + 2]) &  0x3F]         )
            i += 3    
        }

        if i < length {
            encoded.append (Base64.chars  [(ord (str [i + 0]) >>    2) &  0x3F])
            if i == (length - 1) {
                encoded.append (Base64.chars  [(ord (str [i + 0]) & 0x03) << 4])
                encoded.append ('=')
            } else {
                encoded.append (Base64.chars [((ord (str [i + 0]) & 0x03) << 4)|
                                              ((ord (str [i + 1]) & 0xF0) >> 4)])
                encoded.append (Base64.chars  [(ord (str [i + 1]) & 0x0F) << 2 ])
            }
            encoded.append ('=')
        }
        return Str (encoded)
    }

    func decode (str) {
        typecast (Str, str)
        length = len (str)
        i = 0

        for i in 0 .. length {
            if Base64.lut [ord (str [i])] > 63 {
                break
            }
        }

        remaining = i
        decoded = StringBuffer ()

        i = 0
        
        while remaining > 4 {
            decoded.append (chr ((Base64.lut [ord (str [i + 0]) & 0xFF] << 2 |
                                  Base64.lut [ord (str [i + 1]) & 0xFF] >> 4) & 0xFF))
            decoded.append (chr ((Base64.lut [ord (str [i + 1]) & 0xFF] << 4 |
                                  Base64.lut [ord (str [i + 2]) & 0xFF] >> 2) & 0xFF))
            decoded.append (chr ((Base64.lut [ord (str [i + 2]) & 0xFF] << 6 |
                                  Base64.lut [ord (str [i + 3]) & 0xFF]     ) & 0xFF))
            i += 4
            remaining -= 4
        }
        if remaining > 1 {
            decoded.append (chr ((Base64.lut [ord (str [i + 0]) & 0xFF] << 2 |
                                  Base64.lut [ord (str [i + 1]) & 0xFF] >> 4) & 0xFF))
        }
        if remaining > 2 {
            decoded.append (chr ((Base64.lut [ord (str [i + 1]) & 0xFF] << 4 |
                                  Base64.lut [ord (str [i + 2]) & 0xFF] >> 2) & 0xFF))
        }
        if remaining > 3 {
            decoded.append (chr ((Base64.lut [ord (str [i + 2]) & 0xFF] << 6 |
                Base64.lut [ord (str [i + 3]) & 0xFF]     ) & 0xFF))
        }
        return Str (decoded)
    }
}

class Base16 {
    func encode (str) {
        typecast (Str, str)
        buf = StringBuffer ();
        for ch in str {
            buf.append (Base16.lut [ord (ch)]);
        }
        return Str (buf);
    }
    
    func decode (str) {
        typecast (Str, str)
        buf = StringBuffer ();
        for i in range (0, len (str), 2) {
            chrstr = str.substr (i, i + 2);
            buf.append (chr (Int (chrstr, 16)));
        }
        return Str (buf);
    }
}

func encode64 (obj) => Base64.encode (obj);
func decode64 (obj) => Base64.decode (obj);
func encode16 (obj) => Base16.encode (obj);
func decode16 (obj) => Base16.decode (obj);

Base64.lut = [
    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 62, 64, 64, 64, 63,
    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 64, 64, 64, 64, 64,
    64, 00, 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14,
    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 64, 64, 64, 64, 64,
    64, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 64, 64, 64, 64, 64,
    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
]

Base16.lut = [
    "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f",
    "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f",
    "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f",
    "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f",
    "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f",
    "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f",
    "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f",
    "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f",
    "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f",
    "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f",
    "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af",
    "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf",
    "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf",
    "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df",
    "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef",
    "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"
]

Base64.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
